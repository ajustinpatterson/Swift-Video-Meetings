{"ast":null,"code":"var _jsxFileName = \"/Users/justinpatterson/git-stuff/codeworks/projects/name-to-be-changed/client/src/containers/App/App.tsx\";\nimport Peer from 'peerjs';\nimport Webcam from 'react-webcam';\nimport React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\nimport { WebcamComponent } from '../../components/Webcam/Webcam'; // import {uuid} from '../../uuid';\n\n// console.log('uuid: ', uuid);\nfunction App({\n  socket\n}) {\n  // create the peerobject with no id which will be automaticaly assigned (uuid) on the open evennt\n  //****************** VARIABLES ************************/\n  const myVideoRef = useRef(null);\n  const otherVideoRef = useRef(null);\n  const [hasOtherJoined, setHasOtherJoined] = useState(false);\n  const [streams, setStreams] = useState([]);\n  const [sharing, setSharing] = useState(false);\n  const [videoToggle, setVideoToggle] = useState(false);\n  const [recording, setRecording] = useState(false); // const MediaRecorder: any = null;\n\n  const mediaDevices = navigator.mediaDevices;\n  let chunks = [];\n  const constraints = {\n    audio: true,\n    video: {\n      // user, {exact: 'user'}, environment\n      facingMode: 'user',\n      width: {\n        min: 640,\n        ideal: 1280,\n        max: 1920\n      },\n      height: {\n        min: 480,\n        ideal: 720,\n        max: 1080\n      }\n    }\n  };\n  const gdmOptions = {\n    video: {\n      cursor: \"never\" // width: 100,\n\n    },\n    audio: {\n      echoCancellation: true,\n      noiseSuppression: true,\n      sampleRate: 44100\n    }\n  }; //****************** FUNCTIONS DECLARATION ************************/\n\n  function connectToNewUser(userId, otherPeerId, stream, peer) {\n    console.log('Other user peerId ->', otherPeerId);\n    peer.connect(otherPeerId); // call is emitted when a remote peer attempts to call you.\n\n    const mediaConnection = peer.call(otherPeerId, stream);\n    mediaConnection.on('stream', otherUserStream => {\n      // it gets called two times for each type of track audio and video\n      // console.log('other stream', otherUserStream);\n      addSecondVideoStream(otherUserStream);\n    });\n  }\n\n  ;\n\n  function addSecondVideoStream(stream) {\n    setHasOtherJoined(true);\n    setStreams([...streams, stream]); // ...\n  }\n\n  ; // VIDEO ON/OFF\n\n  function displayMyStream(stream) {\n    setVideoToggle(true);\n    navigator.mediaDevices.getUserMedia(constraints).then(stream => {\n      myVideoRef.current.video.srcObject = stream;\n    });\n  }\n\n  function handleVideoToggle() {\n    setVideoToggle(!videoToggle);\n    videoToggle ? myVideoRef.current.video.srcObject = null : navigator.mediaDevices.getUserMedia(constraints).then(stream => {\n      myVideoRef.current.video.srcObject = stream;\n    }); // display picture\n  }\n\n  function stopDisplayMyStream(stream) {\n    navigator.mediaDevices.getUserMedia(constraints).then(stream => {\n      myVideoRef.current.video.srcObject = null;\n    });\n    setVideoToggle(false);\n  } // SCREEN SHARING\n\n\n  function stopScreenSharing() {\n    navigator.mediaDevices.getUserMedia(constraints).then(stream => {\n      // (myVideoRef.current! as any).video.srcObject = stream;\n      // stream.getVideoTracks()[0].enabled = !stream.getVideoTracks()[0].enabled\n      displayMyStream(stream);\n      console.log(stream.getVideoTracks());\n    });\n  }\n\n  async function screenSharing(options) {\n    let captureStream = null;\n\n    try {\n      console.log('options', options);\n      const mediaDevices = navigator.mediaDevices;\n      captureStream = await mediaDevices.getDisplayMedia(gdmOptions);\n      myVideoRef.current.video.srcObject = captureStream;\n      console.log('captureStream', captureStream);\n      console.log('get video tracks', captureStream.getVideoTracks());\n\n      captureStream.getVideoTracks()[0].onended = function () {\n        stopScreenSharing();\n      };\n    } catch (err) {\n      console.error(\"Error: \" + err);\n    }\n\n    return captureStream;\n  } // // RECORD VIDEO/AUDIO ON/OFF\n  // function handleRecording() {\n  //   setVideoToggle(!videoToggle);\n  //   videoToggle\n  //     ? startRecording()\n  //     : stopRecordingAndDownload()\n  //   // display picture\n  // }\n  // function startRecording() {\n  //   navigator.mediaDevices.getUserMedia(constraints)\n  //     .then((stream) => {\n  //       const options = { mimeType: \"video/webm; codecs=vp9\" };\n  //       const mediaRecorder = new MediaRecorder(stream, options);\n  //       mediaRecorder.ondataavailable = handleDataAvailable;\n  //       mediaRecorder.start();\n  //       console.log('mediaRecorder.state', mediaRecorder.state)\n  //     })\n  // }\n  // function handleDataAvailable(event: any) {\n  //   console.log(event)\n  //   if (event.data.size > 0) {\n  //     chunks.push(event.data);\n  //     console.log(chunks);\n  //     download();\n  //   }\n  // }\n  // function download() {\n  //   const blob = new Blob(chunks, {\n  //     type: \"video/webm\"\n  //   });\n  //   const url = URL.createObjectURL(blob);\n  //   const a = document.createElement(\"a\");\n  //   document.body.appendChild(a);\n  //   // a.style = \"display: none\";\n  //   a.href = url;\n  //   a.download = \"test.webm\";\n  //   a.click();\n  //   window.URL.revokeObjectURL(url);\n  // }\n  // function stopRecordingAndDownload() {\n  //   navigator.mediaDevices.getUserMedia(constraints)\n  //     .then((stream) => {\n  //       mediaRecorder.stop();\n  //     })\n  // }\n\n\n  function handleRecord(stream) {\n    setRecording(true);\n  }\n\n  function handleStop(stream) {\n    setRecording(false);\n    screenSharing(stream);\n  } // AUDIO ON/OFF\n\n\n  function handleAudio(stream) {\n    console.log(stream.getAudioTracks());\n    const isEnabled = stream.getAudioTracks()[0].enabled;\n\n    if (isEnabled) {\n      stream.getAudioTracks()[0].enabled = false;\n    } else {\n      stream.getAudioTracks()[0].enabled = true;\n    }\n  } //****************** USE EFFECT ************************/\n\n\n  useEffect(() => {\n    socket.on('connect', () => {\n      navigator.mediaDevices.getUserMedia(constraints // {video: true,\n      // audio: true}\n      ).then(stream => {\n        console.log('recordingr', recording); // console.log(stream.getAudioTracks())\n        // if ('srcObject' in myVideoRef) {\n        //   (myVideoRef.current! as any).video.srcObject = stream;\n        // } else {\n        //   (myVideoRef.current! as any).video.src = window.URL.createObjectURL(stream);\n        // }\n\n        displayMyStream(stream);\n        console.log('constraints: ', constraints);\n        const peer = new Peer(undefined, {\n          host: 'localhost',\n          port: 4000,\n          path: '/'\n        });\n        console.log('peer', peer);\n        console.log('my stream getAudotracks', stream.getAudioTracks());\n        console.log('my stream getTrackById', stream.getTrackById('65d7ee52-b0cc-405f-8b83-a6ae30661a8d'));\n        console.log('my stream getTracks', stream.getTracks());\n        console.log('my stream getVideoTracks', stream.getVideoTracks()); // set peer listeners\n\n        peer.on('error', err => {\n          console.log('error peer connection', err);\n        });\n        peer.on('open', peerId => {\n          console.log('My peerId ->', peerId);\n          socket.emit('join-room', 12345, socket.id, peerId);\n        }); // Emitted when a new data connection is established from a remote peer.\n\n        peer.on('connection', conn => {\n          console.log('*****************************an user just connected', stream);\n          conn.on('data', data => {\n            console.log('this is the data from other peer: ', data);\n          });\n        }); // open is emitted when a new data connection is established from a remote peer.\n        // the peerID is automatically generated here with the uuid lib\n        // whenever a new user connects it will connect to him through the peerId\n\n        socket.on('user-connected', (userId, otherPeerId) => {\n          connectToNewUser(userId, otherPeerId, stream, peer);\n        }); // when the peer make a call\n\n        peer.on('call', call => {\n          console.log('peer.on call is triggered');\n          call.answer(stream); // const video = document.createElement('video');\n\n          call.on('stream', otherUserStream => {\n            // it gets called two times for each type of track audio and video\n            // console.log('other stream', otherUserStream);\n            // add other user video to dom\n            addSecondVideoStream(otherUserStream);\n          });\n          call.on('close', () => {\n            console.log('peer.on CLOSE is triggered'); // disconnect the peer and get rid of the stream\n\n            peer.disconnect();\n            otherVideoRef.current.video.srcObject = null; // this sets the hadOtherJoined to false\n\n            setHasOtherJoined(false);\n            console.log(hasOtherJoined);\n          });\n        });\n      }).catch(error => {\n        console.error(error.name, error.message);\n      });\n    });\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 5\n    }\n  }, console.log(socket), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Webcam, {\n    ref: myVideoRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 9\n    }\n  }), console.log('othervideo REF ////////////////', otherVideoRef), streams.map(stream => /*#__PURE__*/React.createElement(WebcamComponent, {\n    videoRef: stream,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 35\n    }\n  }))), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn btn-primary btn-sm de\",\n    onClick: screenSharing,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 7\n    }\n  }, \"Share Screen\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn btn-primary btn-sm de\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 7\n    }\n  }, \"Audio\"), /*#__PURE__*/React.createElement(\"video\", {\n    src: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn btn-primary btn-sm de\",\n    onClick: handleVideoToggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 7\n    }\n  }, videoToggle ? 'Stop video' : 'Start video'));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/justinpatterson/git-stuff/codeworks/projects/name-to-be-changed/client/src/containers/App/App.tsx"],"names":["Peer","Webcam","React","useState","useEffect","useRef","WebcamComponent","App","socket","myVideoRef","otherVideoRef","hasOtherJoined","setHasOtherJoined","streams","setStreams","sharing","setSharing","videoToggle","setVideoToggle","recording","setRecording","mediaDevices","navigator","chunks","constraints","audio","video","facingMode","width","min","ideal","max","height","gdmOptions","cursor","echoCancellation","noiseSuppression","sampleRate","connectToNewUser","userId","otherPeerId","stream","peer","console","log","connect","mediaConnection","call","on","otherUserStream","addSecondVideoStream","displayMyStream","getUserMedia","then","current","srcObject","handleVideoToggle","stopDisplayMyStream","stopScreenSharing","getVideoTracks","screenSharing","options","captureStream","getDisplayMedia","onended","err","error","handleRecord","handleStop","handleAudio","getAudioTracks","isEnabled","enabled","undefined","host","port","path","getTrackById","getTracks","peerId","emit","id","conn","data","answer","disconnect","catch","name","message","map"],"mappings":"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","sourcesContent":["import Peer from 'peerjs';\nimport Webcam from 'react-webcam';\nimport React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\nimport { WebcamComponent } from '../../components/Webcam/Webcam';\n// import {uuid} from '../../uuid';\ninterface props {\n  socket: any;\n}\n// console.log('uuid: ', uuid);\nfunction App({ socket }: props) {\n  // create the peerobject with no id which will be automaticaly assigned (uuid) on the open evennt\n  //****************** VARIABLES ************************/\n  const myVideoRef = useRef(null);\n  const otherVideoRef = useRef(null);\n  const [hasOtherJoined, setHasOtherJoined] = useState(false);\n  const [streams, setStreams] = useState<MediaStream[]>([]);\n  const [sharing, setSharing] = useState(false);\n  const [videoToggle, setVideoToggle] = useState(false);\n  const [recording, setRecording] = useState(false);\n  // const MediaRecorder: any = null;\n  const mediaDevices = navigator.mediaDevices as any;\n  let chunks: any[] = [];\n  const constraints = {\n    audio: true,\n    video: {\n      // user, {exact: 'user'}, environment\n      facingMode: 'user',\n      width: {\n        min: 640,\n        ideal: 1280,\n        max: 1920\n      },\n      height: {\n        min: 480,\n        ideal: 720,\n        max: 1080\n      }\n    }\n  }\n  const gdmOptions = {\n    video: {\n      cursor: \"never\",\n      // width: 100,\n    },\n    audio: {\n      echoCancellation: true,\n      noiseSuppression: true,\n      sampleRate: 44100\n    }\n  }\n  //****************** FUNCTIONS DECLARATION ************************/\n  function connectToNewUser(userId: string, otherPeerId: string, stream: MediaStream, peer: any) {\n    console.log('Other user peerId ->', otherPeerId);\n    peer.connect(otherPeerId);\n    // call is emitted when a remote peer attempts to call you.\n    const mediaConnection = peer.call(otherPeerId, stream);\n    mediaConnection.on('stream', (otherUserStream: any) => {\n      // it gets called two times for each type of track audio and video\n      // console.log('other stream', otherUserStream);\n      addSecondVideoStream(otherUserStream)\n    })\n  };\n  function addSecondVideoStream(stream: MediaStream) {\n    setHasOtherJoined(true);\n    setStreams([...streams, stream]);\n    // ...\n  };\n  // VIDEO ON/OFF\n  function displayMyStream(stream: MediaStream) {\n    setVideoToggle(true);\n    navigator.mediaDevices.getUserMedia(constraints)\n      .then((stream) => {\n        (myVideoRef.current! as any).video.srcObject = stream;\n      })\n  }\n  function handleVideoToggle() {\n    setVideoToggle(!videoToggle);\n    videoToggle\n      ? (myVideoRef.current! as any).video.srcObject = null\n      : navigator.mediaDevices.getUserMedia(constraints)\n        .then((stream) => {\n          (myVideoRef.current! as any).video.srcObject = stream;\n        })\n    // display picture\n  }\n  function stopDisplayMyStream(stream: MediaStream) {\n    navigator.mediaDevices.getUserMedia(constraints)\n      .then((stream) => {\n        (myVideoRef.current! as any).video.srcObject = null;\n      });\n    setVideoToggle(false);\n  }\n  // SCREEN SHARING\n  function stopScreenSharing() {\n    navigator.mediaDevices.getUserMedia(constraints)\n      .then((stream) => {\n        // (myVideoRef.current! as any).video.srcObject = stream;\n        // stream.getVideoTracks()[0].enabled = !stream.getVideoTracks()[0].enabled\n        displayMyStream(stream);\n        console.log(stream.getVideoTracks())\n      })\n  }\n  async function screenSharing(options: object) {\n    let captureStream = null;\n    try {\n      console.log('options', options)\n      const mediaDevices = navigator.mediaDevices as any;\n      captureStream = await mediaDevices.getDisplayMedia(gdmOptions);\n      (myVideoRef.current! as any).video.srcObject = captureStream;\n      console.log('captureStream', captureStream)\n      console.log('get video tracks', captureStream.getVideoTracks())\n      captureStream.getVideoTracks()[0].onended = function () {\n        stopScreenSharing()\n      }\n    } catch (err) {\n      console.error(\"Error: \" + err);\n    }\n    return captureStream;\n  }\n  // // RECORD VIDEO/AUDIO ON/OFF\n  // function handleRecording() {\n  //   setVideoToggle(!videoToggle);\n  //   videoToggle\n  //     ? startRecording()\n  //     : stopRecordingAndDownload()\n  //   // display picture\n  // }\n  // function startRecording() {\n  //   navigator.mediaDevices.getUserMedia(constraints)\n  //     .then((stream) => {\n  //       const options = { mimeType: \"video/webm; codecs=vp9\" };\n  //       const mediaRecorder = new MediaRecorder(stream, options);\n  //       mediaRecorder.ondataavailable = handleDataAvailable;\n  //       mediaRecorder.start();\n  //       console.log('mediaRecorder.state', mediaRecorder.state)\n  //     })\n  // }\n  // function handleDataAvailable(event: any) {\n  //   console.log(event)\n  //   if (event.data.size > 0) {\n  //     chunks.push(event.data);\n  //     console.log(chunks);\n  //     download();\n  //   }\n  // }\n  // function download() {\n  //   const blob = new Blob(chunks, {\n  //     type: \"video/webm\"\n  //   });\n  //   const url = URL.createObjectURL(blob);\n  //   const a = document.createElement(\"a\");\n  //   document.body.appendChild(a);\n  //   // a.style = \"display: none\";\n  //   a.href = url;\n  //   a.download = \"test.webm\";\n  //   a.click();\n  //   window.URL.revokeObjectURL(url);\n  // }\n  // function stopRecordingAndDownload() {\n  //   navigator.mediaDevices.getUserMedia(constraints)\n  //     .then((stream) => {\n  //       mediaRecorder.stop();\n  //     })\n  // }\n  function handleRecord(stream: any) {\n    setRecording(true);\n  }\n  function handleStop(stream: any) {\n    setRecording(false);\n    screenSharing(stream);\n  }\n  // AUDIO ON/OFF\n  function handleAudio(stream: any) {\n    console.log(stream.getAudioTracks())\n    const isEnabled = stream.getAudioTracks()[0].enabled\n    if (isEnabled) {\n      stream.getAudioTracks()[0].enabled = false\n    } else {\n      stream.getAudioTracks()[0].enabled = true\n    }\n  }\n  //****************** USE EFFECT ************************/\n  useEffect(() => {\n    socket.on('connect', () => {\n      navigator.mediaDevices\n        .getUserMedia(\n          constraints\n          // {video: true,\n          // audio: true}\n        )\n        .then((stream) => {\n          console.log('recordingr', recording)\n          // console.log(stream.getAudioTracks())\n          // if ('srcObject' in myVideoRef) {\n          //   (myVideoRef.current! as any).video.srcObject = stream;\n          // } else {\n          //   (myVideoRef.current! as any).video.src = window.URL.createObjectURL(stream);\n          // }\n          displayMyStream(stream);\n          console.log('constraints: ', constraints);\n          const peer = new Peer(undefined, {\n            host: 'localhost',\n            port: 4000,\n            path: '/',\n          });\n          console.log('peer', peer);\n          console.log('my stream getAudotracks', stream.getAudioTracks())\n          console.log('my stream getTrackById', stream.getTrackById('65d7ee52-b0cc-405f-8b83-a6ae30661a8d'))\n          console.log('my stream getTracks', stream.getTracks())\n          console.log('my stream getVideoTracks', stream.getVideoTracks())\n          // set peer listeners\n          peer.on('error', (err) => {\n            console.log('error peer connection', err);\n          });\n          peer.on('open', (peerId) => {\n            console.log('My peerId ->', peerId);\n            socket.emit('join-room', 12345, socket.id, peerId);\n          });\n          // Emitted when a new data connection is established from a remote peer.\n          peer.on('connection', (conn) => {\n            console.log('*****************************an user just connected', stream);\n            conn.on('data', (data) => {\n              console.log('this is the data from other peer: ', data);\n            })\n          });\n          // open is emitted when a new data connection is established from a remote peer.\n          // the peerID is automatically generated here with the uuid lib\n          // whenever a new user connects it will connect to him through the peerId\n          socket.on('user-connected', (userId: string, otherPeerId: string) => {\n            connectToNewUser(userId, otherPeerId, stream, peer);\n          });\n          // when the peer make a call\n          peer.on('call', (call) => {\n            console.log('peer.on call is triggered')\n            call.answer(stream);\n            // const video = document.createElement('video');\n            call.on('stream', (otherUserStream) => {\n              // it gets called two times for each type of track audio and video\n              // console.log('other stream', otherUserStream);\n              // add other user video to dom\n              addSecondVideoStream(otherUserStream)\n            });\n            call.on('close', () => {\n              console.log('peer.on CLOSE is triggered')\n              // disconnect the peer and get rid of the stream\n              peer.disconnect();\n              (otherVideoRef.current! as any).video.srcObject = null;\n              // this sets the hadOtherJoined to false\n              setHasOtherJoined(false);\n              console.log(hasOtherJoined);\n            });\n          });\n        })\n        .catch(error => {\n          console.error(error.name, error.message);\n        })\n        ;\n    });\n  }, []);\n  return (\n    <div className=\"App\">\n      {console.log(socket)}\n      <div className=\"container\">\n        <Webcam ref={myVideoRef} />\n        {console.log('othervideo REF ////////////////', otherVideoRef)}\n        {\n          streams.map((stream) => <WebcamComponent videoRef={stream} />)\n        }\n      </div>\n      <button className=\"btn btn-primary btn-sm de\" onClick={screenSharing}>Share Screen</button>\n      {/* <button className=\"btn btn-primary btn-sm de\" >Video ON</button> */}\n      <button className=\"btn btn-primary btn-sm de\" >Audio</button>\n      {/* <button className=\"btn btn-primary btn-sm de\" onClick={handleStart}>Start rec</button> */}\n      <video src=\"\"></video>\n      {/* <button className=\"btn btn-primary btn-sm de\" onClick={handleShare}>Share Screen</button>\n      <button className=\"btn btn-primary btn-sm de\" onClick={handleShare}>Share Screen</button> */}\n      <button className=\"btn btn-primary btn-sm de\" onClick={handleVideoToggle}>{videoToggle ? 'Stop video' : 'Start video'}</button>\n      {/* <button className=\"btn btn-primary btn-sm de\" onClick={handleRecording}>{recording ? 'Stop Recording' : 'Start Recording'}</button> */}\n      {/* <a href=\"http://localhost:4000\" target=\"_blank\">\n        click here\n      </a> */}\n      {/* this is temporary! */}\n      {/* <button onClick={handleShare}>Share</button> */}\n    </div>\n  );\n}\nexport default App;"]},"metadata":{},"sourceType":"module"}