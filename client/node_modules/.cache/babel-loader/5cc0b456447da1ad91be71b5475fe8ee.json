{"ast":null,"code":"var _jsxFileName = \"/Users/justinpatterson/git-stuff/codeworks/projects/name-to-be-changed/client/src/components/Landing/Landing.tsx\";\nimport React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useMutation } from '@apollo/client';\nimport { GoogleLogin } from 'react-google-login';\nimport logo from '../../assets/swift-logo.png';\nimport './Landing.css'; //** */\n\nexport const CREATE_USER = gql`\n  mutation AddAUser(\n    $email: String!\n    $familyName: String!\n    $givenName: String!\n    $googleId: String!\n    $imageUrl: String!\n    $name: String!\n  ) {\n    createUser(\n      email: $email\n      familyName: $familyName\n      givenName: $givenName\n      googleId: $googleId\n      imageUrl: $imageUrl\n      name: $name\n    ) {\n      email\n      familyName\n      givenName\n      googleId\n      imageUrl\n      name\n    }\n  }\n`;\nconst apiId = '770694473973-nsm7s39sp1tvm3jpg6d3pk7ln309gvbr.apps.googleusercontent.com';\n\nconst Landing = () => {\n  const [loggedIn, setLoggedIn] = useState(false);\n  const [userName, setUserName] = useState('');\n  const history = useHistory();\n  const active = localStorage.getItem('loggedIn');\n  const [createUser, newUser] = useMutation(CREATE_USER);\n\n  const handleClick = () => {\n    history.push('/powderroom');\n  };\n\n  const responseGoogle = async response => {\n    try {\n      console.log(response);\n\n      if (response) {\n        setUserName(response.profileObj.name);\n        createUser({\n          variables: {\n            email: response.profileObj.email,\n            familyName: response.profileObj.familyName,\n            givenName: response.profileObj.givenName,\n            googleId: response.profileObj.googleId,\n            imageUrl: response.profileObj.imageUrl,\n            name: response.profileObj.name\n          }\n        });\n        localStorage.setItem('loggedIn', `${loggedIn}`);\n        setLoggedIn(true);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"landing\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: logo,\n    alt: \"Logo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }), !active ? /*#__PURE__*/React.createElement(GoogleLogin, {\n    clientId: apiId,\n    render: renderProps => /*#__PURE__*/React.createElement(\"button\", {\n      className: \"button\",\n      onClick: renderProps.onClick,\n      disabled: renderProps.disabled,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 13\n      }\n    }, \"Login\"),\n    buttonText: \"Login\",\n    onSuccess: responseGoogle,\n    onFailure: responseGoogle,\n    cookiePolicy: 'single_host_origin',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }) : /*#__PURE__*/React.createElement(\"button\", {\n    className: \"button\",\n    onClick: handleClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  }, \"Start Meeting\"));\n};\n\nexport default Landing;","map":{"version":3,"sources":["/Users/justinpatterson/git-stuff/codeworks/projects/name-to-be-changed/client/src/components/Landing/Landing.tsx"],"names":["React","useState","useHistory","useMutation","GoogleLogin","logo","CREATE_USER","gql","apiId","Landing","loggedIn","setLoggedIn","userName","setUserName","history","active","localStorage","getItem","createUser","newUser","handleClick","push","responseGoogle","response","console","log","profileObj","name","variables","email","familyName","givenName","googleId","imageUrl","setItem","err","renderProps","onClick","disabled"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport {\n  BrowserRouter,\n  Router,\n  Route,\n  useHistory,\n  Link,\n} from 'react-router-dom';\nimport { useMutation } from '@apollo/client';\nimport { GoogleLogin, GoogleLogout } from 'react-google-login';\nimport logo from '../../assets/swift-logo.png';\nimport './Landing.css';\n\n//** */\nexport const CREATE_USER = gql`\n  mutation AddAUser(\n    $email: String!\n    $familyName: String!\n    $givenName: String!\n    $googleId: String!\n    $imageUrl: String!\n    $name: String!\n  ) {\n    createUser(\n      email: $email\n      familyName: $familyName\n      givenName: $givenName\n      googleId: $googleId\n      imageUrl: $imageUrl\n      name: $name\n    ) {\n      email\n      familyName\n      givenName\n      googleId\n      imageUrl\n      name\n    }\n  }\n`;\n\nconst apiId =\n  '770694473973-nsm7s39sp1tvm3jpg6d3pk7ln309gvbr.apps.googleusercontent.com';\n\nconst Landing = () => {\n  const [loggedIn, setLoggedIn] = useState<boolean>(false);\n  const [userName, setUserName] = useState('');\n  const history = useHistory();\n  const active = localStorage.getItem('loggedIn');\n  const [createUser, newUser] = useMutation(CREATE_USER);\n\n  const handleClick = () => {\n    history.push('/powderroom');\n  };\n\n  const responseGoogle = async (response: any) => {\n    try {\n      console.log(response);\n      if (response) {\n        setUserName(response.profileObj.name);\n        createUser({\n          variables: {\n            email: response.profileObj.email,\n            familyName: response.profileObj.familyName,\n            givenName: response.profileObj.givenName,\n            googleId: response.profileObj.googleId,\n            imageUrl: response.profileObj.imageUrl,\n            name: response.profileObj.name,\n          },\n        });\n        localStorage.setItem('loggedIn', `${loggedIn}`);\n        setLoggedIn(true);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  return (\n    <div className=\"landing\">\n      <img src={logo} alt=\"Logo\" />\n      {!active ? (\n        <GoogleLogin\n          clientId={apiId}\n          render={(renderProps) => (\n            <button\n              className=\"button\"\n              onClick={renderProps.onClick}\n              disabled={renderProps.disabled}\n            >\n              Login\n            </button>\n          )}\n          buttonText=\"Login\"\n          onSuccess={responseGoogle}\n          onFailure={responseGoogle}\n          cookiePolicy={'single_host_origin'}\n        />\n      ) : (\n        <button className=\"button\" onClick={handleClick}>\n          Start Meeting\n        </button>\n      )}\n    </div>\n  );\n};\n\nexport default Landing;\n"]},"metadata":{},"sourceType":"module"}