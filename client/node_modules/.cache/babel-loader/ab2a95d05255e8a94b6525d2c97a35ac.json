{"ast":null,"code":"var _jsxFileName = \"/Users/justinpatterson/git-stuff/codeworks/projects/name-to-be-changed/client/src/containers/App/App.tsx\";\nimport Peer from 'peerjs';\nimport React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\nimport { BrowserRouter } from 'react-router-dom';\nimport Routes from '../../components/Routes/Routes'; // import {uuid} from '../../uuid';\n\n// console.log('uuid: ', uuid);\nfunction App({\n  socket\n}) {\n  const myVideoRef = useRef(null);\n  const otherVideoRef = useRef(null);\n  const [hasOtherJoined, setHasOtherJoined] = useState(false); // const [hasVideo, setHasVideo] = useState(true);\n\n  const peer = new Peer(undefined, {\n    host: 'localhost',\n    port: 4000,\n    path: '/'\n  });\n  useEffect(() => {\n    socket.on('connect', () => {\n      const connectToNewUser = (userId, otherPeerId, stream) => {\n        console.log('Other user peerId ->', otherPeerId); // call is emitted when a remote peer attempts to call you.\n\n        const mediaConnection = peer.call(otherPeerId, stream);\n        mediaConnection.on('stream', otherUserStream => {\n          // it gets called two times for each type of track audio and video\n          console.log('other stream', otherUserStream);\n          addSecondVideoStream(otherUserStream);\n        });\n      };\n\n      function addSecondVideoStream(stream) {\n        setHasOtherJoined(true);\n        otherVideoRef.current.video.srcObject = stream; // ...\n      } // create the peerobject with no id which will be automaticaly assigned (uuid) on the open evennt\n\n\n      navigator.mediaDevices.getUserMedia({\n        video: true,\n        audio: true\n      }).then(stream => {\n        myVideoRef.current.video.srcObject = stream;\n        console.log('my stream', stream); // set peer listeners\n\n        peer.on('error', err => {\n          console.log('error', err);\n        }); // connection is emitted when a connection to the PeerServer is established.\n\n        peer.on('connection', () => {\n          console.log('some peer connected');\n        }); // open is emitted when a new data connection is established from a remote peer.\n        // the peerID is automatically generated here with the uuid lib\n\n        peer.on('open', peerId => {\n          console.log('My peerId ->', peerId); // to get the others peer id wee\n\n          socket.emit('join-room', 12345, socket.id, peerId);\n        }); // whenever a new user connects it will connect to him through the peerId\n\n        socket.on('user-connected', (userId, otherPeerId) => {\n          connectToNewUser(userId, otherPeerId, stream);\n        }); // when the peer make a call\n\n        peer.on('call', call => {\n          call.answer(stream); // const video = document.createElement('video');\n\n          call.on('stream', otherUserStream => {\n            // it gets called two times for each type of track audio and video\n            console.log('other stream', otherUserStream); // add other user video to dom\n\n            addSecondVideoStream(otherUserStream);\n          });\n          call.on('close', () => {\n            // disconnect the peer and get rid of the stream\n            peer.disconnect();\n            otherVideoRef.current.video.srcObject = null; // this sets the hadOtherJoined to false\n\n            setHasOtherJoined(false);\n            console.log(hasOtherJoined);\n          });\n        });\n      });\n    });\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(BrowserRouter, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Routes, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }\n  })));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/justinpatterson/git-stuff/codeworks/projects/name-to-be-changed/client/src/containers/App/App.tsx"],"names":["Peer","React","useState","useEffect","useRef","BrowserRouter","Routes","App","socket","myVideoRef","otherVideoRef","hasOtherJoined","setHasOtherJoined","peer","undefined","host","port","path","on","connectToNewUser","userId","otherPeerId","stream","console","log","mediaConnection","call","otherUserStream","addSecondVideoStream","current","video","srcObject","navigator","mediaDevices","getUserMedia","audio","then","err","peerId","emit","id","answer","disconnect"],"mappings":"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","sourcesContent":["import Peer from 'peerjs';\nimport Webcam from 'react-webcam';\nimport React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\nimport {\n  BrowserRouter,\n  Router,\n  Route,\n  useHistory,\n  Link,\n} from 'react-router-dom';\nimport Routes from '../../components/Routes/Routes';\n// import {uuid} from '../../uuid';\ninterface props {\n  socket: any;\n}\n// console.log('uuid: ', uuid);\nfunction App({ socket }: props) {\n  const myVideoRef = useRef(null);\n  const otherVideoRef = useRef(null);\n  const [hasOtherJoined, setHasOtherJoined] = useState(false);\n  // const [hasVideo, setHasVideo] = useState(true);\n  const peer = new Peer(undefined, {\n    host: 'localhost',\n    port: 4000,\n    path: '/',\n  });\n  useEffect(() => {\n    socket.on('connect', () => {\n      const connectToNewUser = (userId: string, otherPeerId: string, stream: MediaStream) => {\n        console.log('Other user peerId ->', otherPeerId);\n        // call is emitted when a remote peer attempts to call you.\n        const mediaConnection = peer.call(otherPeerId, stream);\n        mediaConnection.on('stream', (otherUserStream: any) => {\n          // it gets called two times for each type of track audio and video\n          console.log('other stream', otherUserStream);\n          addSecondVideoStream(otherUserStream)\n        })\n      };\n      function addSecondVideoStream(stream: any) {\n        setHasOtherJoined(true);\n        (otherVideoRef.current! as any).video.srcObject = stream;\n        // ...\n      }\n      // create the peerobject with no id which will be automaticaly assigned (uuid) on the open evennt\n      navigator.mediaDevices\n        .getUserMedia({\n          video: true,\n          audio: true\n        })\n        .then((stream) => {\n          (myVideoRef.current! as any).video.srcObject = stream;\n          console.log('my stream', stream);\n          // set peer listeners\n          peer.on('error', (err) => {\n            console.log('error', err);\n          });\n          // connection is emitted when a connection to the PeerServer is established.\n          peer.on('connection', () => {\n            console.log('some peer connected');\n          });\n          // open is emitted when a new data connection is established from a remote peer.\n          // the peerID is automatically generated here with the uuid lib\n          peer.on('open', (peerId) => {\n            console.log('My peerId ->', peerId);\n            // to get the others peer id wee\n            socket.emit('join-room', 12345, socket.id, peerId);\n          });\n          // whenever a new user connects it will connect to him through the peerId\n          socket.on('user-connected', (userId: string, otherPeerId: string) => {\n            connectToNewUser(userId, otherPeerId, stream);\n          });\n          // when the peer make a call\n          peer.on('call', (call) => {\n            call.answer(stream);\n            // const video = document.createElement('video');\n            call.on('stream', (otherUserStream) => {\n              // it gets called two times for each type of track audio and video\n              console.log('other stream', otherUserStream);\n              // add other user video to dom\n              addSecondVideoStream(otherUserStream)\n            });\n            call.on('close', () => {\n              // disconnect the peer and get rid of the stream\n              peer.disconnect();\n              (otherVideoRef.current! as any).video.srcObject = null;\n              // this sets the hadOtherJoined to false\n              setHasOtherJoined(false);\n              console.log(hasOtherJoined);\n            });\n          });\n        });\n    });\n  }, []);\n\n  return (\n    <div className=\"App\">\n      {/* <a href=\"http://localhost:4000\" target=\"_blank\">\n        click here\n      </a>\n      <Webcam ref={myVideoRef} />\n      {hasOtherJoined && <Webcam ref={otherVideoRef} />} */}\n\n      <BrowserRouter>\n        <Routes />\n\n      </BrowserRouter>\n    </div>\n  );\n}\nexport default App;"]},"metadata":{},"sourceType":"module"}